"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUniqueGameCode = exports.removeArrayItemWithFilter = exports.removeArrayItem = exports.generateRandomString = void 0;
const generateRandomString = (length = 4, characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ') => new Array(length)
    .fill('')
    .map(() => characters.split('')[Math.floor(Math.random() * characters.length)])
    .join('');
exports.generateRandomString = generateRandomString;
const removeArrayItem = (array, item) => {
    const itemIndex = array.indexOf(item);
    if (itemIndex !== -1) {
        array.splice(itemIndex, 1);
        return true;
    }
    return false;
};
exports.removeArrayItem = removeArrayItem;
const removeArrayItemWithFilter = (array, filter) => {
    const itemIndex = array.findIndex(filter);
    if (itemIndex !== -1) {
        array.splice(itemIndex, 1);
        return true;
    }
    return false;
};
exports.removeArrayItemWithFilter = removeArrayItemWithFilter;
const createUniqueGameCode = (filter, length = 4, characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', iterations = 10) => __awaiter(void 0, void 0, void 0, function* () {
    let gameCode = exports.generateRandomString(length, characters);
    let iterationsRemaining = iterations;
    while (typeof filter === 'function' && (yield filter(gameCode))) {
        gameCode = exports.generateRandomString(length, characters);
        iterationsRemaining -= 1;
        if (iterationsRemaining <= 0) {
            throw new Error('Error creating unique game code.');
        }
    }
    return gameCode;
});
exports.createUniqueGameCode = createUniqueGameCode;
