"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketGameLobbyServer = void 0;
const websocket_event_wrapper_1 = __importDefault(require("websocket-event-wrapper"));
const datastore_1 = require("./datastore");
const listeners_1 = __importDefault(require("./listeners"));
const types_1 = require("./types");
class WebSocketGameLobbyServer extends listeners_1.default {
    constructor({ port, server, datastore }) {
        super();
        this.listeners = Object.keys(types_1.ServerEvents).reduce((acc, curr) => {
            return Object.assign({ [curr]: [] }, acc);
        }, {});
        this.wss = new websocket_event_wrapper_1.default({
            port,
            server,
            onConnect: (client, request) => __awaiter(this, void 0, void 0, function* () {
                const params = new URLSearchParams(request.url.substring(1));
                client.gameId = params.get('gameId') || '';
                client.gameCode = params.get('gameCode') || '';
                client.playerId = params.get('playerId') || '';
                this.wss.send(yield this.sendUpdate(client), client);
            })
        });
        if (datastore) {
            this.datastore = datastore;
        }
        else {
            this.datastore = new datastore_1.EphemeralDataStore();
        }
        this.datastore.setup();
        this.wss.addEventListener((_a, client) => __awaiter(this, void 0, void 0, function* () {
            var { type, gameId, gameCode, forceSpectator } = _a, rest = __rest(_a, ["type", "gameId", "gameCode", "forceSpectator"]);
            if (!this.listeners[type]) {
                return;
            }
            if (type === 'create' || type === 'join') {
                const game = (yield this.datastore.findGame(gameId)) ||
                    (yield this.datastore.findGameWithCode(gameCode)) ||
                    (yield this.datastore.createGame(gameCode));
                if (!game) {
                    return;
                }
                client.gameId = game.gameId;
                if (!client.playerId) {
                    if (game.started || forceSpectator) {
                        const spectator = yield this.datastore.createSpectator(client.gameId);
                        client.playerId = spectator.spectatorId;
                    }
                    else {
                        const player = yield this.datastore.createPlayer(client.gameId, rest.name, rest.avatar);
                        client.playerId = player.playerId;
                    }
                }
            }
            else if (type === 'start') {
                yield this.datastore.startGame(client.gameId);
            }
            else if (type === 'leave') {
                yield this.datastore.leaveGame(client.gameId, client.playerId);
            }
            else if (type === 'end') {
                yield this.datastore.endGame(client.gameId);
            }
            yield this.runEventListeners(type, Object.assign({ type, gameId: client.gameId, playerId: client.playerId }, rest), this.datastore);
            yield this.broadcastUpdate(client.gameId);
        }));
    }
    sendUpdate(client) {
        return __awaiter(this, void 0, void 0, function* () {
            const game = (yield this.datastore.findGame(client.gameId)) ||
                (yield this.datastore.findGameWithCode(client.gameCode));
            if (game) {
                const player = yield this.datastore.findPlayer(game.gameId, client.playerId);
                const spectator = yield this.datastore.findSpectator(game.gameId, client.playerId);
                const turn = yield this.datastore.currentTurn(game.gameId);
                if (game && (player || spectator)) {
                    return { game, player, spectator, turn };
                }
            }
            client.gameId = '';
            client.playerId = '';
            return {};
        });
    }
    broadcastUpdate(gameId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.wss.broadcast((client) => __awaiter(this, void 0, void 0, function* () { return yield this.sendUpdate(client); }), (client) => client.gameId === gameId);
        });
    }
}
exports.WebSocketGameLobbyServer = WebSocketGameLobbyServer;
