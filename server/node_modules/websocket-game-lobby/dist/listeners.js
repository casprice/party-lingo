"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
class Listeners {
    constructor() {
        this.listeners = {};
    }
    addEventListener(type, callback) {
        if (!this.listeners[type]) {
            this.listeners[type] = [];
        }
        if (typeof callback === 'function') {
            this.listeners[type].push(callback);
        }
    }
    removeEventListener(type, callback) {
        if (this.listeners[type]) {
            utils_1.removeArrayItem(this.listeners[type], callback);
        }
    }
    removeAllEventListeners() {
        Object.keys(this.listeners).forEach(type => {
            this.listeners[type].splice(0, this.listeners[type].length);
        });
    }
    runEventListeners(type, data, datastore) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.listeners[type]) {
                for (let i = 0; i < this.listeners[type].length; i += 1) {
                    yield this.listeners[type][i](data, datastore);
                }
            }
        });
    }
}
exports.default = Listeners;
