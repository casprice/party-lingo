import Listeners from '../listeners';
import { IDataStore, DataStoreEvents, Game, Player, Spectator, Turn } from '../types';
export declare const client: any;
export declare class PostgresDataStore extends Listeners<DataStoreEvents> implements IDataStore {
    listeners: {};
    setup(): Promise<void>;
    createGame(gameCode?: string): Promise<Game>;
    findGame(gameId: string | undefined): Promise<Game | undefined>;
    findGameWithCode(gameCode: string | undefined): Promise<Game | undefined>;
    editGame(gameId: string, callback: (game: Game) => Promise<Game>): Promise<Game>;
    leaveGame(gameId: string, playerId: string): Promise<void>;
    startGame(gameId: string): Promise<Game>;
    endGame(gameId: string): Promise<void>;
    createPlayer(gameId: string, name?: string, avatar?: string): Promise<Player>;
    findPlayer(gameId: string, playerId: string): Promise<Player | undefined>;
    editPlayer(gameId: string, playerId: string, callback: (player: Player) => Promise<Player>): Promise<Player>;
    createSpectator(gameId: string): Promise<Spectator>;
    findSpectator(gameId: string, spectatorId: string): Promise<Spectator | undefined>;
    editSpectator(gameId: string, spectatorId: string, callback: (spectator: Spectator) => Promise<Spectator>): Promise<Spectator>;
    createTurn(gameId: string): Promise<Turn>;
    findTurn(gameId: string, turnId: string): Promise<Turn | undefined>;
    currentTurn(gameId: string): Promise<Turn | undefined>;
    editTurn(gameId: string, turnId: string, callback: (turn: Turn) => Promise<Turn>): Promise<Turn>;
    editCurrentTurn(gameId: string, callback: (turn: Turn) => Promise<Turn>): Promise<Turn>;
    endCurrentTurn(gameId: string): Promise<void>;
}
